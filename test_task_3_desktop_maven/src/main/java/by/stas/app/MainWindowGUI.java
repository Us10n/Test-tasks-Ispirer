package by.stas.app;

import by.stas.app.entity.LanguageEnum;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.util.Arrays;
import java.util.Locale;
import java.util.ResourceBundle;

public class MainWindowGUI extends JFrame {

    private static final String LABEL_TEXT_KEY = "label.text";
    private static final String BUTTON_TEXT_KEY = "button.text";
    private static final String LANG_BUNDLE = "lang";

    private JPanel mainPanel;
    private JButton button;
    private JComboBox langBox;
    private JLabel wordLabel;

    private Locale currentLocale = Locale.getDefault();

    public MainWindowGUI(String title) {
        super(title);

        //config elements
        configureWindow();
        configureLangComboBox();

        //set elements text
        button.setText(getStringFromResources(BUTTON_TEXT_KEY, currentLocale));
        wordLabel.setText("");

        //action listeners
        button.addActionListener(e -> {
            String text = getStringFromResources(LABEL_TEXT_KEY, currentLocale);
            wordLabel.setText(text);
        });
        langBox.addActionListener(e -> {
            String selectedString = langBox.getSelectedItem() != null ? langBox.getSelectedItem().toString() : "";
            if (!selectedString.isEmpty()) {
                LanguageEnum selectedItem = LanguageEnum.getComboItemByValue(selectedString);
                switch (selectedItem) {
                    case ENGLISH:
                        currentLocale = Locale.US;
                        break;
                    case RUSSIAN:
                        currentLocale = new Locale("ru", "RU");
                        break;
                }
                String text = getStringFromResources(BUTTON_TEXT_KEY, currentLocale);
                button.setText(text);
            }
        });
    }

    private String getStringFromResources(String key, Locale locale) {
        ResourceBundle resourceBundle = ResourceBundle.getBundle(LANG_BUNDLE, locale);
        return resourceBundle.getString(key);
    }

    private void configureWindow() {
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainPanel);
        this.setSize(500, 500);
    }

    private void configureLangComboBox() {
        Object[] langs = Arrays.stream(LanguageEnum.values()).map(LanguageEnum::getValue).toArray();
        DefaultComboBoxModel<Object> model = new DefaultComboBoxModel<>(langs);
        langBox.setModel(model);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        wordLabel = new JLabel();
        wordLabel.setText("Label");
        mainPanel.add(wordLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button = new JButton();
        button.setText("Button");
        mainPanel.add(button, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        langBox = new JComboBox();
        mainPanel.add(langBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
